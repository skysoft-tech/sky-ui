const fs = require('fs').promises;
const path = require('path');

const TargetFileName = 'all-icons.ts';
const TargetCollectionName = 'SkyIcons';
const IconFilePrefix = 'skyIcon';

class SvgInlineWorker {
  sourceDir = '';
  targetFile = '';

  allIconsMap = new Map();

  constructor(source, target) {
    this.sourceDir = source;
    this.targetFile = path.join(target, TargetFileName);
  }

  async inlineAllToFile() {
    await this.createTargetFile();
    await this.writeHeader();

    await this.processFiles();
    await this.writeExportObject();
  }

  async processFiles() {
    const files = await fs.readdir(this.sourceDir);
    const svgFiles = files.filter(s => s.endsWith('.svg'));

    for (const file of svgFiles) {
      const variableName = path.parse(file).name;
      const iconName = this.extractIconName(variableName);
      const fileFullName = path.join(this.sourceDir, file);
      const fileContent = await fs.readFile(fileFullName, 'utf-8');

      this.allIconsMap.set(iconName, variableName);
      await this.writeVariable(variableName, fileContent);
    }
  }

  async writeExportObject() {
    const exportObj = [`export const ${TargetCollectionName} = new Map<string, string>([`];

    for (const [key, value] of this.allIconsMap) {
      exportObj.push(`    ['${key}', ${value}],`);
    }

    exportObj.push(']);\n');

    await fs.appendFile(this.targetFile, exportObj.join('\n'));
  }

  extractIconName(fileName) {
    let name = fileName;
    if (name.startsWith(IconFilePrefix)) {
      name = name.slice(IconFilePrefix.length);
    }

    const normalizedName = name.charAt(0).toLowerCase() + name.slice(1);
    return normalizedName;
  }

  async createTargetFile() {
    await fs.writeFile(this.targetFile, '');
  }

  async writeHeader() {
    const header = '/**\n' + ' * @description:\n' +
    ' * DO NOT CHANGE THIS FILE. AUTOGENERATED\n' +
    ' * To generate please execute `inline-svg` command\n' +
    ' */\n\n';

    await fs.appendFile(this.targetFile, header);
  }

  async writeVariable(variableName, variableValue) {
    variableValue = variableValue.replace(/\s+/g, ' ');

    await fs.appendFile(this.targetFile, `const ${variableName} =\n`);
    await fs.appendFile(this.targetFile, `    '${variableValue}';\n\n`);
  }
}

(async function main() {
  const sourcePath = process.argv[2] || 'projects/icon/src/lib/images';
  const targetPath = process.argv[3] || 'projects/icon/src/lib';

  const worker = new SvgInlineWorker(sourcePath, targetPath);

  worker.inlineAllToFile();
})();
